<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title></title>
</head>
<body>
<?php

//类型约束，只能是方法/函数约束，目前只能是数组与对象的约束

/**
 * 类型约束
 *
 * 最为重要的是，在PHP目前的版本上，仅仅支持在函数/方法上使用数组和对象的约束
 *
 * 什么叫类型约束？
 * 就是要求某个变量只能使用（接收，存储）某种指定的数据类型；
 * php属于“弱类型语言”，通常不支持类型约束；
 * 相应的，强类型语言，类型约束却是其“基本特征”。
 *
 * 1，定义一个函数（方法）时， 一个形参，可以使用类型约束，也可以不使用；
 * 2，如果使用了类型约束，则对应的该实参数据，就必须是要求的那种类型。
 * 3，能够使用的类型约束，其实非常少，只有以下几种可用：
 * 数组： array，
 * 对象：使用类的名称，表示，传递过来的实参，必须是该类的实例；
 * 接口： 使用接口的名称，表示，传递过来的实参，必须是实现了该接口的类的实例
 */
//演示类型约束：
interface USB
{
}//这就是一个接口
class A
{
}//这就是类
class B implements USB
{
}//这个类实例了接口USB

function f1($p1, array $p2, A $p3, USB $p4)
{
    echo "<br />没有约束的p1：" . $p1;
    echo "<br />要求是数组的p2：";
    print_r($p2);
    echo "<br />要求是类A的对象：";
    var_dump($p3);
    echo "<br />要求是实现了接口USB的对象：";
    var_dump($p4);
}

$obj1 = new A();
$obj2 = new B();
$arr = array(1, 2, 'zhuang');
//下面开始各种形式调用函数：
//f1(1.2, 1.3, $obj1, $obj2);//这里报错，1.3不合适
//f1(1.2, $arr, $obj2, $obj2);//这里报错，第一个$obj2不合适
//f1(1.2, $arr, $obj1, $obj1);//这里报错，第二个$obj1不合适

//这个是没有问题的写法
f1(1233, $arr, $obj1, $obj2);
?>
</body>
</html>