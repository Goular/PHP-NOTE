<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title></title>
</head>
<body>

<!--浮点数-->

<!--
浮点数有两种的表现形式
1.普通的的小数点标记
2.科学计数法
-->

<!--
值得注意的一点是：浮点数不应该直接进行大小的比较
原因是，计算机保存浮点数还是使用的是二进制保存，此时小数部分需要反复乘以2 大于1就减一，没有就是0，反复直到商为0获取得到循环小数或得到不重复的无限小数为止
无限小数会产生保存的精确度的问题，因为只保存的是32位数，此时精确度就会产生问题
解决比较的办法有一个（目前来说），就是双方确定比较的位数后，使十的n次方（指定的位数），并用round()进行划定，这样再去比较整数的部分，这样才能达到比较好的效果
-->

<?php
$v1 = 8.1;
$v2 = $v1 / 3;
if ($v2 == 2.7) {
    echo "{$v1}/3等于2.7";
} else {
    echo "{$v1}/3不等于2.7";
}
echo "<hr/>";
var_dump($v2);//目前PHP不是能正确看到计算机计算8.1/3的实际数字，其实是一段小数，在javascript中能看到
echo "<hr/>";

//以下为正确的解决浮点数比较大小的解决办法
//首先必须考虑的是计算的精度
//假设我们设置这个值为4位
if (round($v1 * 10000) / 3 == round(2.7 * 10000)) {
    //如果答案相同，则说明在规定精度的位置上，此比较的结果为相同
    echo "{$v1}/3等于2.7";
} else {
    echo "{$v1}/3不等于2.7";
}

//下面显示的是PHP的预定义常量

echo "<hr/>M_PI:" . M_PI;
echo "<hr/>INT_MAX:" . PHP_INT_MAX;

echo "<hr/>";
//类型会自动转换
$b = 100000;
var_dump($b * $b * $b);//越过int范围，溢出后变为float
?>

<script>

    var num = 8.1;
    document.write("<hr/>从JS返回回来的效果是:" + num / 3);

</script>
</body>
</html>